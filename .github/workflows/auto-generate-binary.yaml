name: Build & Release Binaries

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  # Job to build Linux binaries (amd64, arm64)
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install ARM64 Cross-Compiler
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Create Build Directory
        run: mkdir -p build

      - name: Build Linux AMD64 (.so)
        run: |
          export GOOS=linux
          export GOARCH=amd64
          export CGO_ENABLED=1
          go build -trimpath -buildmode=c-shared -o build/out_logzio-linux-amd64.so ./output

      - name: Build Linux ARM64 (.so)
        run: |
          export GOOS=linux
          export GOARCH=arm64
          export CGO_ENABLED=1
          export CC=aarch64-linux-gnu-gcc # Specify cross-compiler
          go build -trimpath -buildmode=c-shared -o build/out_logzio-linux-arm64.so ./output

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries 
          path: build/*.so

  # Job to build macOS binaries (amd64, arm64)
  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Create Build Directory
        run: mkdir -p build

      - name: Build macOS AMD64 (.so)
        run: |
          export GOOS=darwin
          export GOARCH=amd64
          export CGO_ENABLED=1
          go build -trimpath -buildmode=c-shared -o build/out_logzio-macos-amd64.so ./output

      - name: Build macOS ARM64 (.so)
        run: |
          export GOOS=darwin
          export GOARCH=arm64
          export CGO_ENABLED=1
          go build -trimpath -buildmode=c-shared -o build/out_logzio-macos-arm64.so ./output

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: build/*.so

  # Job to build Windows binary (amd64)
  build-windows:
    name: Build Windows Binary
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install MinGW
        run: choco install mingw --yes --no-progress --force

      - name: Create Build Directory
        run: mkdir build

      - name: Add MinGW to PATH
        run: echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Build Windows AMD64 (.dll)
        run: |
          set GOOS=windows
          set GOARCH=amd64
          set CGO_ENABLED=1
          go build -trimpath -buildmode=c-shared -o build/out_logzio-windows-amd64.dll ./output
        shell: cmd

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: build/*.dll

  # Job to upload all binaries from artifacts to the GitHub Release
  upload-release-assets:
    name: Upload Release Assets
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Debug: List downloaded files structure
      - name: List downloaded files
        run: find artifacts -type f

      - name: Upload Binaries to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: |
            artifacts/linux-binaries/*.so
            artifacts/macos-binaries/*.so
            artifacts/windows-binary/*.dll
          fail_on_unmatched_files: true 